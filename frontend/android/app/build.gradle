apply plugin: 'com.android.application'
import java.util.Properties
import java.io.FileInputStream

def keystoreProps = new Properties()
def keystorePropsFile = rootProject.file("keystore.properties")
if (keystorePropsFile.exists()) {
    keystoreProps.load(new FileInputStream(keystorePropsFile))
} else {
    logger.lifecycle("keystore.properties not found – release may not be signed.")
}
android {
    namespace "com.orirot.givit"
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.orirot.givit"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 4
        versionName "1.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        aaptOptions {
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }

    signingConfigs {
        release {
            if (keystoreProps["storeFile"]) {
                storeFile file(keystoreProps["storeFile"])
                storePassword keystoreProps["storePassword"]
                keyAlias keystoreProps["keyAlias"]
                keyPassword keystoreProps["keyPassword"]
            } else {
                // מאפשר build מקומי גם בלי קובץ keystore.properties,
                // אבל ב-CI/שחרור – חייב להיות קיים.
                logger.lifecycle("No keystore props – release not signed.")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            zipAlignEnabled true
            signingConfig signingConfigs.release   // חשוב: לחבר את החתימה ל-release
        }
        debug {
            debuggable true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
    
    // Google Maps and Location Services
    implementation "com.google.android.gms:play-services-maps:18.2.0"
    implementation "com.google.android.gms:play-services-location:21.2.0"
    implementation "com.google.android.gms:play-services-base:18.3.0"
    
    // WebView improvements for maps
    implementation "androidx.webkit:webkit:1.8.0"
    
    // Firebase Cloud Messaging
    implementation "com.google.firebase:firebase-messaging:24.0.3"
    
    // Google Auth for OAuth 2.0 with Chrome Custom Tabs
    implementation "com.google.android.gms:play-services-auth:21.2.0"
    
    // Firebase Auth
    implementation "com.google.firebase:firebase-auth:23.1.0"
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
