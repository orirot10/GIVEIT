workflows:
  ios-signed-ipa:
    name: iOS Signed IPA (Capacitor; frontend/)
    instance_type: mac_mini_m1
    max_build_duration: 60
    environment:
      node: 18
      xcode: latest
      cocoapods: default
      vars:
        APP_SCHEME: "App"
        IOS_DIR: "frontend/ios/App"
    scripts:
      - name: Install deps (frontend)
        script: |
          cd frontend
          npm ci || npm i

      - name: Build web (auto-detect framework)
        script: |
          set -e
          cd frontend

          echo "==> Listing npm scripts:"
          npm run || true

          echo "==> Detecting framework & running build…"
          BUILD_OK=0
          WEB_OUT=""

          if [ -f vite.config.ts ] || [ -f vite.config.js ] || npm ls vite --depth=0 >/dev/null 2>&1; then
            npx vite build && BUILD_OK=1
          fi

          if [ $BUILD_OK -eq 0 ] && (npm ls react-scripts --depth=0 >/dev/null 2>&1); then
            npx react-scripts build && BUILD_OK=1
          fi

          if [ $BUILD_OK -eq 0 ] && (npm ls next --depth=0 >/dev/null 2>&1); then
            npx next build
            npx next export || true
            BUILD_OK=1
          fi

          if [ $BUILD_OK -eq 0 ] && (npx ionic -v >/dev/null 2>&1); then
            npx ionic build && BUILD_OK=1
          fi

          if [ $BUILD_OK -eq 0 ]; then
            if npm run -s build >/dev/null 2>&1; then
              npm run build && BUILD_OK=1
            fi
          fi

          if [ $BUILD_OK -eq 0 ]; then
            echo "No known build tool detected and no 'npm run build' script exists."
            echo "Please add a build script to frontend/package.json, e.g.:"
            echo '  "scripts": { "build": "vite build" }'
            echo "Failing with logs:"
            cat package.json
            exit 1
          fi

          if [ -d dist ]; then WEB_OUT="dist"; fi
          if [ -d build ]; then WEB_OUT="build"; fi
          if [ -d out ];   then WEB_OUT="out";   fi

          if [ -z "$WEB_OUT" ]; then
            echo "Build finished but couldn't find output folder (dist/build/out)."
            ls -la
            exit 1
          fi

          echo "==> Build output detected at: $WEB_OUT"

          if [ -f capacitor.config.json ]; then
            node -e "const fs=require('fs');const p='capacitor.config.json';const o=JSON.parse(fs.readFileSync(p));o.webDir='$WEB_OUT';fs.writeFileSync(p, JSON.stringify(o,null,2));console.log('Updated',p,'webDir=$WEB_OUT');"
          elif ls capacitor.config.* >/dev/null 2>&1; then
            sed -i.bak "s/webDir: *['\"][^'\"]*['\"]/webDir: '$WEB_OUT'/" capacitor.config.* || true
            echo "Attempted to set webDir='$WEB_OUT' in capacitor.config.*"
          else
            echo "No capacitor.config.* found in frontend. Make sure it's there."
          fi

      - name: Ensure iOS platform exists & sync
        script: |
          cd frontend
          if [ ! -d "ios" ]; then
            npx cap add ios
          fi
          npx cap sync ios

      # ✅ פה מותקנים התעודה (.p12) והפרופיל (.mobileprovision) שהעלית ב-Codemagic UI
      - name: Install signing certificates & provisioning profiles
        script: |
          keychain add-certificates
          xcode-project use-profiles

      # (אופציונלי) עדכון מספר build אוטומטי
      - name: Bump build number
        script: |
          cd $IOS_DIR
          # נשתמש ב-CM_BUILD_ID כמספר build; אפשר להחליף כרצונך
          NEW_BUILD_NUMBER=${CM_BUILD_ID:-1}
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEW_BUILD_NUMBER" "App/Info.plist" || true

      - name: Build signed .ipa (App Store export)
        script: |
          cd $IOS_DIR
          # codemagic-cli-tools יבצעו archive + export חתומים לפי הפרופיל
          xcode-project build-ipa \
            --workspace "App.xcworkspace" \
            --scheme "$APP_SCHEME" \
            --archive-configuration "Release" \
            --export-method "app-store"

    artifacts:
      - build/ios/ipa/*.ipa
      - $IOS_DIR/build/Build/Products/Release-iphoneos/*.app
      - $IOS_DIR/build/*.xcarchive

  # אופציונלי: העלאה אוטומטית ל-TestFlight (דורש מפתחות App Store Connect)
  ios-app-store:
    name: iOS Signed IPA + Upload to TestFlight
    instance_type: mac_mini_m1
    max_build_duration: 60
    environment:
      node: 18
      xcode: latest
      vars:
        APP_SCHEME: "App"
        IOS_DIR: "frontend/ios/App"
        BUNDLE_ID: "com.orirot.givit"
        # הוסף ב-Encrypted variables:
        # APP_STORE_CONNECT_ISSUER_ID
        # APP_STORE_CONNECT_KEY_IDENTIFIER
        # APP_STORE_CONNECT_PRIVATE_KEY  (ה-API key במלואו כטקסט)
    scripts:
      - name: Trigger signed build
        script: |
          echo "This workflow depends on ios-signed-ipa steps; repeating key steps:"
          cd frontend && (npm ci || npm i)
          # ... אפשר לייבא פה את אותם צעדים כמו למעלה, או לקרוא ל-reusable script
          cd ..
          keychain add-certificates
          xcode-project use-profiles
          cd frontend && npx cap sync ios && cd ..
          cd $IOS_DIR
          xcode-project build-ipa \
            --workspace "App.xcworkspace" \
            --scheme "$APP_SCHEME" \
            --archive-configuration "Release" \
            --export-method "app-store"

      - name: Upload to TestFlight
        script: |
          IPA_PATH=$(ls build/ios/ipa/*.ipa | head -n 1)
          if [ -z "$IPA_PATH" ]; then
            echo "No IPA found to upload."; exit 1
          fi

          app-store-connect publish-ios \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --api-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
            --ipa "$IPA_PATH" \
            --bundle-id "$BUNDLE_ID" \
            --submit-for-review false \
            --release-type "TESTFLIGHT"

    artifacts:
      - build/ios/ipa/*.ipa
