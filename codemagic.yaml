workflows:
  ios-appstore-signed:
    name: iOS App Store (Capacitor; signed)
    instance_type: mac_mini_m1
    max_build_duration: 60

    environment:
      node: 18
      xcode: latest
      cocoapods: default
      groups:
        - o1   # שמור כאן: P12_BASE64, P12_PASSWORD, DIST_PROFILE_BASE64 (+ אופציונלי P12_SHA256)
      vars:
        APP_SCHEME: "App"
        IOS_DIR: "frontend/ios/App"
        APPLE_TEAM_ID: "39WVDVZKGE"

    scripts:
      - name: Install deps (frontend)
        script: |
          set -euxo pipefail
          cd frontend
          npm ci || npm i

      - name: Build web (auto-detect framework)
        script: |
          set -euxo pipefail
          cd frontend
          BUILD_OK=0
          WEB_OUT=""
          if [ -f vite.config.ts ] || [ -f vite.config.js ] || npm ls vite --depth=0 >/dev/null 2>&1; then npx vite build && BUILD_OK=1; fi
          if [ $BUILD_OK -eq 0 ] && npm ls react-scripts --depth=0 >/dev/null 2>&1; then npx react-scripts build && BUILD_OK=1; fi
          if [ $BUILD_OK -eq 0 ] && npm ls next --depth=0 >/dev/null 2>&1; then npx next build && npx next export || true; BUILD_OK=1; fi
          if [ $BUILD_OK -eq 0 ] && npx ionic -v >/dev/null 2>&1; then npx ionic build && BUILD_OK=1; fi
          if [ $BUILD_OK -eq 0 ] && npm run -s build >/dev/null 2>&1; then npm run build && BUILD_OK=1; fi
          [ $BUILD_OK -eq 1 ] || { echo "No known web build"; cat package.json || true; exit 1; }

          if   [ -d dist ];  then WEB_OUT="dist";
          elif [ -d build ]; then WEB_OUT="build";
          elif [ -d out ];   then WEB_OUT="out";
          else echo "No dist/build/out found"; exit 1; fi

          echo "==> Web build at: $WEB_OUT"
          if [ -f capacitor.config.json ]; then
            node -e "const fs=require('fs');const p='capacitor.config.json';const o=JSON.parse(fs.readFileSync(p));o.webDir='$WEB_OUT';fs.writeFileSync(p, JSON.stringify(o,null,2));console.log('Updated',p,'webDir=$WEB_OUT');"
          elif ls capacitor.config.* >/dev/null 2>&1; then
            sed -i.bak "s/webDir: *['\"][^'\"]*['\"]/webDir: '$WEB_OUT'/" capacitor.config.* || true
          else
            echo "WARN: No capacitor.config.* found in frontend"
          fi

      - name: Ensure iOS platform exists & sync
        script: |
          set -euxo pipefail
          cd frontend
          [ ! -d "ios" ] && npx cap add ios
          npx cap sync ios
          cd ios/App
          pod install --repo-update

      - name: Detect BUNDLE_ID (robust)
        script: |
          set -euxo pipefail
          cd "$IOS_DIR"
          # נקה ערכים ישנים
          [ -f "$CM_ENV" ] && sed -i.bak '/^export BUNDLE_ID=/d' "$CM_ENV" || true

          BID=""

          # 1) מקור ראשי: showBuildSettings
          BID=$(xcodebuild -showBuildSettings -workspace "App.xcworkspace" -scheme "$APP_SCHEME" -configuration Release \
                | awk -F' = ' '/^[[:space:]]*PRODUCT_BUNDLE_IDENTIFIER[[:space:]]*=/{print $2; exit}') || true

          # 2) גיבוי: מתוך project.pbxproj
          if [ -z "${BID:-}" ] || [ "$BID" = "NO" ]; then
            BID=$(grep -Rho 'PRODUCT_BUNDLE_IDENTIFIER *= *[^;]*;' App.xcodeproj/project.pbxproj \
                  | head -n1 | sed -E 's/.*= *([^;]*);/\1/') || true
          fi

          # 3) גיבוי נוסף: מתוך capacitor.config.*
          if [ -z "${BID:-}" ] || [ "$BID" = "NO" ]; then
            cd "$CM_BUILD_DIR/../frontend" || true
            if [ -f capacitor.config.json ]; then
              BID=$(node -e "try{const o=require('./capacitor.config.json');console.log(o.appId||'');}catch(e){console.log('');}")
            elif ls capacitor.config.* >/dev/null 2>&1; then
              BID=$(awk -F"'" '/appId:/{gsub(/"|,/, "", $2); print $2; exit}' capacitor.config.* || true)
            fi
          fi

          [ -n "${BID:-}" ] && [ "$BID" != "NO" ] || { echo "Failed to detect PRODUCT_BUNDLE_IDENTIFIER (got '$BID')."; exit 1; }
          echo "Detected BUNDLE_ID=$BID"
          echo "export BUNDLE_ID=$BID" >> "$CM_ENV"

      - name: Check required env
        script: |
          set -euxo pipefail
          test -n "${P12_BASE64:-}" || { echo "P12_BASE64 missing"; exit 1; }
          test -n "${P12_PASSWORD:-}" || { echo "P12_PASSWORD missing"; exit 1; }
          test -n "${DIST_PROFILE_BASE64:-}" || { echo "DIST_PROFILE_BASE64 missing"; exit 1; }
          echo "All required env vars are present."

      - name: Install certificates & provisioning profile (custom keychain via temp P12)
        script: |
          set -euo pipefail
          set +x
          : "${P12_BASE64:?P12_BASE64 is missing}"
          : "${P12_PASSWORD:?P12_PASSWORD is missing}"
          : "${DIST_PROFILE_BASE64:?DIST_PROFILE_BASE64 is missing}"

          CERTS_DIR="$HOME/Library/MobileDevice/Certificates"
          PROFILES_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$CERTS_DIR" "$PROFILES_DIR"

          echo "$P12_BASE64"          | tr -d '\r\n\t ' > /tmp/p12.b64
          echo "$DIST_PROFILE_BASE64" | tr -d '\r\n\t ' > /tmp/profile.b64
          /usr/bin/base64 -D -i /tmp/p12.b64     -o /tmp/dist.p12
          /usr/bin/base64 -D -i /tmp/profile.b64 -o "$PROFILES_DIR/profile.mobileprovision"

          /usr/bin/openssl pkcs12 -in /tmp/dist.p12 -noout -info -passin env:P12_PASSWORD

          KEYCHAIN_NAME="build.keychain"
          KEYCHAIN_PWD="cm_build_keychain_pwd"
          KEYCHAIN_PATH="$HOME/Library/Keychains/${KEYCHAIN_NAME}-db"
          /usr/bin/security create-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_NAME" || true
          /usr/bin/security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          /usr/bin/security unlock-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_PATH"
          /usr/bin/security list-keychains -d user -s "$KEYCHAIN_PATH"
          /usr/bin/security default-keychain -d user -s "$KEYCHAIN_PATH"

          # Split -> repackage P12 (יציב ל-import), ואז import
          /usr/bin/openssl pkcs12 -in /tmp/dist.p12 -passin env:P12_PASSWORD -nocerts -nodes -out /tmp/key.pem
          /usr/bin/openssl pkcs12 -in /tmp/dist.p12 -passin env:P12_PASSWORD -clcerts -nokeys -out /tmp/cert.pem
          TEMP_P12_PASS="Temp123!"
          /usr/bin/openssl pkcs12 -export -inkey /tmp/key.pem -in /tmp/cert.pem \
            -out /tmp/combined.p12 -passout pass:${TEMP_P12_PASS}
          /usr/bin/security import /tmp/combined.p12 \
            -k "$KEYCHAIN_PATH" -P "${TEMP_P12_PASS}" \
            -A -T /usr/bin/codesign -T /usr/bin/security

          # Parse profile + התאמת Bundle IDs
          PLIST_OUT="$PROFILES_DIR/profile.plist"
          /usr/bin/security cms -D -i "$PROFILES_DIR/profile.mobileprovision" > "$PLIST_OUT"
          PROV_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' "$PLIST_OUT")
          PROV_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' "$PLIST_OUT")
          TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:com.apple.developer.team-identifier' "$PLIST_OUT") || true
          BUNDLE_ID_IN_PROF=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' "$PLIST_OUT" | sed "s/^${TEAM_ID}\.//") || true

          # טען את BUNDLE_ID שזוהה וודא התאמה
          [ -f "$CM_ENV" ] && . "$CM_ENV" || true
          echo "Profile Bundle: ${BUNDLE_ID_IN_PROF:-unknown}"
          echo "Project Bundle: ${BUNDLE_ID:-unknown}"
          if [ -n "${BUNDLE_ID_IN_PROF:-}" ] && [ -n "${BUNDLE_ID:-}" ] && [ "$BUNDLE_ID" != "$BUNDLE_ID_IN_PROF" ]; then
            echo "ERROR: Profile bundle '$BUNDLE_ID_IN_PROF' != project bundle '$BUNDLE_ID'. העלה פרופיל App Store שנוצר ל-$BUNDLE_ID."
            exit 1
          fi

          echo "export PROV_NAME=\"${PROV_NAME}\"" >> $CM_ENV
          echo "export PROV_UUID=\"${PROV_UUID}\"" >> $CM_ENV
          echo "export BUNDLE_ID_FROM_PROFILE=\"${BUNDLE_ID_IN_PROF}\"" >> $CM_ENV
          /usr/bin/security find-identity -p codesigning -v || true

      - name: Reload signing vars (fallback)
        script: |
          set -euo pipefail
          [ -f "$CM_ENV" ] && . "$CM_ENV" || true
          PROFILES_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          PLIST_OUT="$PROFILES_DIR/profile.plist"
          if [ -z "${PROV_UUID:-}" ] || [ -z "${PROV_NAME:-}" ]; then
            if [ -f "$PLIST_OUT" ]; then
              PROV_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' "$PLIST_OUT")
              PROV_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' "$PLIST_OUT")
              echo "Recovered PROV_NAME=$PROV_NAME ; PROV_UUID=$PROV_UUID"
              echo "export PROV_NAME=\"$PROV_NAME\"" >> $CM_ENV
              echo "export PROV_UUID=\"$PROV_UUID\"" >> $CM_ENV
            else
              echo "ERROR: profile.plist not found; cannot recover signing vars"; exit 1
            fi
          else
            echo "Signing vars present: PROV_NAME=$PROV_NAME PROV_UUID=$PROV_UUID"
          fi

      - name: Debug signing context
        script: |
          set -euxo pipefail
          [ -f "$CM_ENV" ] && . "$CM_ENV" || true
          security find-identity -p codesigning -v || true
          echo "BUNDLE_ID=${BUNDLE_ID:-unset}"
          echo "BUNDLE_ID_FROM_PROFILE=${BUNDLE_ID_FROM_PROFILE:-unset}"
          echo "PROV_NAME=${PROV_NAME:-unset}"
          echo "PROV_UUID=${PROV_UUID:-unset}"

      - name: Bump build number
        script: |
          set -euxo pipefail
          cd $IOS_DIR
          NEW_BUILD_NUMBER=${CM_BUILD_ID:-1}
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEW_BUILD_NUMBER" "App/Info.plist" || true

      - name: Build (archive) unsigned (no provisioning at archive)
        script: |
          set -euxo pipefail
          [ -f "$CM_ENV" ] && . "$CM_ENV" || true
          cd $IOS_DIR

          # ארכוב בלי חתימה/פרופיל (נמנע משגיאות Pods ו-"requires a provisioning profile")
          xcodebuild archive \
            -workspace "App.xcworkspace" \
            -scheme "$APP_SCHEME" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID"


      - name: Export signed .ipa (App Store)
        script: |
          set -euxo pipefail
          [ -f "$CM_ENV" ] && . "$CM_ENV" || true
          cd $IOS_DIR
          xcode-project export-ipa \
            --archive "$CM_BUILD_DIR/App.xcarchive" \
            --export-method app-store \
            --export-options "provisioningProfiles[${BUNDLE_ID}]=${PROV_NAME}"


    artifacts:
      - build/ios/ipa/*.ipa
      - $IOS_DIR/build/Build/Products/Release-iphoneos/*.app
      - $CM_BUILD_DIR/App.xcarchive
