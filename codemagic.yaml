workflows:
  ios-appstore-signed:
    name: iOS App Store (Capacitor; signed)
    instance_type: mac_mini_m1
    max_build_duration: 60
    environment:
      node: 18
      xcode: latest
      cocoapods: default
      groups:
        - o1   # מכאן ייטענו P12_BASE64 / P12_PASSWORD / DIST_PROFILE_BASE64
      vars:
        APP_SCHEME: "App"
        IOS_DIR: "frontend/ios/App"
        APPLE_TEAM_ID: "39WVDVZKGE"

    scripts:
      - name: Install deps (frontend)
        script: |
          set -euxo pipefail
          cd frontend
          npm ci || npm i

      - name: Build web (auto-detect framework)
        script: |
          set -euxo pipefail
          cd frontend
          BUILD_OK=0
          WEB_OUT=""

          if [ -f vite.config.ts ] || [ -f vite.config.js ] || npm ls vite --depth=0 >/dev/null 2>&1; then npx vite build && BUILD_OK=1; fi
          if [ $BUILD_OK -eq 0 ] && (npm ls react-scripts --depth=0 >/dev/null 2>&1); then npx react-scripts build && BUILD_OK=1; fi
          if [ $BUILD_OK -eq 0 ] && (npm ls next --depth=0 >/dev/null 2>&1); then npx next build && npx next export || true; BUILD_OK=1; fi
          if [ $BUILD_OK -eq 0 ] && (npx ionic -v >/dev/null 2>&1); then npx ionic build && BUILD_OK=1; fi
          if [ $BUILD_OK -eq 0 ] && npm run -s build >/dev/null 2>&1; then npm run build && BUILD_OK=1; fi
          [ $BUILD_OK -eq 1 ] || { echo "No known web build"; cat package.json || true; exit 1; }

          if   [ -d dist ];  then WEB_OUT="dist";
          elif [ -d build ]; then WEB_OUT="build";
          elif [ -d out ];   then WEB_OUT="out";
          else echo "No dist/build/out found"; exit 1; fi

          echo "==> Web build at: $WEB_OUT"
          if [ -f capacitor.config.json ]; then
            node -e "const fs=require('fs');const p='capacitor.config.json';const o=JSON.parse(fs.readFileSync(p));o.webDir='$WEB_OUT';fs.writeFileSync(p, JSON.stringify(o,null,2));console.log('Updated',p,'webDir=$WEB_OUT');"
          elif ls capacitor.config.* >/dev/null 2>&1; then
            sed -i.bak "s/webDir: *['\"][^'\"]*['\"]/webDir: '$WEB_OUT'/" capacitor.config.* || true
          else
            echo "WARN: No capacitor.config.* found in frontend"
          fi

      - name: Ensure iOS platform exists & sync
        script: |
          set -euxo pipefail
          cd frontend
          [ ! -d "ios" ] && npx cap add ios
          npx cap sync ios
          cd ios/App
          pod install --repo-update

      - name: Detect BUNDLE_ID from Xcode
        script: |
          set -euxo pipefail
          cd $IOS_DIR
          BID=$(xcodebuild -showBuildSettings -workspace "App.xcworkspace" -scheme "$APP_SCHEME" -configuration Release \
                | grep -m1 PRODUCT_BUNDLE_IDENTIFIER | awk '{print $3}')
          [ -n "$BID" ] || { echo "Failed to detect PRODUCT_BUNDLE_IDENTIFIER"; exit 1; }
          echo "Detected BUNDLE_ID=$BID"
          echo "export BUNDLE_ID=$BID" >> $CM_ENV

      - name: Check required env
        script: |
          set -euxo pipefail
          test -n "${P12_BASE64:-}" || { echo "P12_BASE64 missing"; exit 1; }
          test -n "${P12_PASSWORD:-}" || { echo "P12_PASSWORD missing"; exit 1; }
          test -n "${DIST_PROFILE_BASE64:-}" || { echo "DIST_PROFILE_BASE64 missing"; exit 1; }
          echo "All required env vars are present."

      - name: Sanity check p12 password (before import)
        script: |
          set -euxo pipefail
          # מנרמל base64 -> קובץ p12 זמני
          echo "$P12_BASE64" | tr -d '\r\n ' > /tmp/p12.b64
          /usr/bin/base64 -D -i /tmp/p12.b64 -o /tmp/dist.p12

          # מציגים “אורך” (לא את הערך) כדי לזהות רווחים/שורות מיותרות
          echo "P12_PASSWORD length: ${#P12_PASSWORD}"

          # בדיקת OpenSSL עם הסיסמה מה-ENV (אם נכשל = סיסמה/קובץ לא תואמים)
          /usr/bin/openssl pkcs12 -in /tmp/dist.p12 -noout -info -passin env:P12_PASSWORD
  
      - name: Install certificates & provisioning profile (custom keychain, robust)
        script: |
          set -euo pipefail
          # אל תדפיס סודות
          set +x

          # ===== בדיקות ENV =====
          : "${P12_BASE64:?P12_BASE64 is missing}"
          : "${P12_PASSWORD:?P12_PASSWORD is missing}"
          : "${DIST_PROFILE_BASE64:?DIST_PROFILE_BASE64 is missing}"

          CERTS_DIR="$HOME/Library/MobileDevice/Certificates"
          PROFILES_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$CERTS_DIR" "$PROFILES_DIR"

          # ===== נרמול ו-Decoding (BSD base64) =====
          echo "$P12_BASE64"          | tr -d '\r\n\t ' > /tmp/p12.b64
          echo "$DIST_PROFILE_BASE64" | tr -d '\r\n\t ' > /tmp/profile.b64

          /usr/bin/base64 -D -i /tmp/p12.b64     -o /tmp/dist.p12
          /usr/bin/base64 -D -i /tmp/profile.b64 -o "$PROFILES_DIR/profile.mobileprovision"

          # ===== Sanity check: האם ה-p12 תואם לסיסמה? =====
          /usr/bin/openssl pkcs12 -in /tmp/dist.p12 -noout -info -passin env:P12_PASSWORD

          # ===== אימות אופציונלי של checksum (אם הגדרת P12_SHA256 ב-ENV) =====
          if [ -n "${P12_SHA256:-}" ]; then
            SUM=$(/usr/bin/shasum -a 256 /tmp/dist.p12 | awk '{print $1}')
            if [ "$SUM" != "$P12_SHA256" ]; then
              echo "P12 SHA256 mismatch. Expected: $P12_SHA256, Got: $SUM"
              exit 1
            fi
          fi

          # ===== יצירת keychain פרטי וייבוא =====
          KEYCHAIN_NAME="build.keychain"
          KEYCHAIN_PWD="cm_build_keychain_pwd"
          KEYCHAIN_PATH="$HOME/Library/Keychains/${KEYCHAIN_NAME}-db"

          /usr/bin/security create-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_NAME" || true
          /usr/bin/security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          /usr/bin/security unlock-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_PATH"
          /usr/bin/security list-keychains -d user -s "$KEYCHAIN_PATH"
          /usr/bin/security default-keychain -d user -s "$KEYCHAIN_PATH"

          /usr/bin/security import /tmp/dist.p12 -k "$KEYCHAIN_PATH" -P "$P12_PASSWORD" -A \
            -T /usr/bin/codesign -T /usr/bin/security

          # הקלות הרשאות לכל זהויות החתימה
          for HASH in $(/usr/bin/security find-identity -p codesigning -v | awk '/\) [0-9A-F]{40}/ {print $2}'); do
            /usr/bin/security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PWD" "$KEYCHAIN_PATH" -t private -Z "$HASH" || true
          done

          # ===== חילוץ נתונים מה-profile =====
          PLIST_OUT="$PROFILES_DIR/profile.plist"
          /usr/bin/security cms -D -i "$PROFILES_DIR/profile.mobileprovision" > "$PLIST_OUT"

          PROV_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' "$PLIST_OUT")
          PROV_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' "$PLIST_OUT")
          TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:com.apple.developer.team-identifier' "$PLIST_OUT") || true
          BUNDLE_ID_IN_PROF=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' "$PLIST_OUT" | sed "s/^${TEAM_ID}\.//") || true

          # החזרת הדיבוג (בלי לחשוף סודות)
          set -x
          echo "== Provisioning profile parsed =="
          echo "Name: ${PROV_NAME}"
          echo "UUID: ${PROV_UUID}"
          echo "Team: ${TEAM_ID:-unknown}"
          echo "Bundle ID (from profile): ${BUNDLE_ID_IN_PROF:-unknown}"

          echo "export PROV_NAME=\"${PROV_NAME}\"" >> $CM_ENV
          echo "export PROV_UUID=\"${PROV_UUID}\"" >> $CM_ENV
          echo "export BUNDLE_ID_FROM_PROFILE=\"${BUNDLE_ID_IN_PROF}\"" >> $CM_ENV

          # דיבוג זהויות חתימה
          /usr/bin/security find-identity -p codesigning -v || true

      - name: Debug signing context
        script: |
          set -euxo pipefail
          security find-identity -p codesigning -v || true
          echo "BUNDLE_ID=${BUNDLE_ID:-unset}"
          echo "BUNDLE_ID_FROM_PROFILE=${BUNDLE_ID_FROM_PROFILE:-unset}"
          echo "PROV_NAME=${PROV_NAME:-unset}"
          echo "PROV_UUID=${PROV_UUID:-unset}"

      - name: Bump build number
        script: |
          set -euxo pipefail
          cd $IOS_DIR
          NEW_BUILD_NUMBER=${CM_BUILD_ID:-1}
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEW_BUILD_NUMBER" "App/Info.plist" || true

      - name: Build (archive) with code signing
        script: |
          set -euxo pipefail
          cd $IOS_DIR
          xcodebuild archive \
            -workspace "App.xcworkspace" \
            -scheme "$APP_SCHEME" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="$PROV_UUID" \
            CODE_SIGNING_ALLOWED=YES CODE_SIGNING_REQUIRED=YES

      - name: Export signed .ipa (App Store)
        script: |
          set -euxo pipefail
          cd $IOS_DIR
          xcode-project export-ipa \
            --archive "$CM_BUILD_DIR/App.xcarchive" \
            --export-method app-store \
            --export-options "provisioningProfiles[$BUNDLE_ID]=$PROV_NAME"

    artifacts:
      - build/ios/ipa/*.ipa
      - $IOS_DIR/build/Build/Products/Release-iphoneos/*.app
      - $CM_BUILD_DIR/App.xcarchive
