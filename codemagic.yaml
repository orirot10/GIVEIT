workflows:
  ios-appstore-auto:
    name: iOS App Store (Capacitor; auto-provision via API key)
    instance_type: mac_mini_m2
    max_build_duration: 60

    environment:
      node: 18
      xcode: latest
      cocoapods: default
      groups:
        - o1   # שמור כאן: APP_STORE_CONNECT_API_KEY_ID, APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_API_KEY_BASE64, (אופציונלי) ITC_PROVIDER
      vars:
        APP_SCHEME: "App"
        IOS_DIR: "frontend/ios/App"
        APPLE_TEAM_ID: "39WVDVZKGE"
        APP_VERSION: "1.0.0"

    scripts:
      - name: Install deps (frontend)
        script: |
          set -euxo pipefail
          cd frontend
          npm ci || npm i

      - name: Build web (auto-detect framework)
        script: |
          set -euxo pipefail
          cd frontend
          BUILD_OK=0
          WEB_OUT=""
          if [ -f vite.config.ts ] || [ -f vite.config.js ] || npm ls vite --depth=0 >/dev/null 2>&1; then npx vite build && BUILD_OK=1; fi
          if [ $BUILD_OK -eq 0 ] && npm ls react-scripts --depth=0 >/dev/null 2>&1; then npx react-scripts build && BUILD_OK=1; fi
          if [ $BUILD_OK -eq 0 ] && npm ls next --depth=0 >/dev/null 2>&1; then npx next build && npx next export || true; BUILD_OK=1; fi
          if [ $BUILD_OK -eq 0 ] && npx ionic -v >/dev/null 2>&1; then npx ionic build && BUILD_OK=1; fi
          if [ $BUILD_OK -eq 0 ] && npm run -s build >/dev/null 2>&1; then npm run build && BUILD_OK=1; fi
          [ $BUILD_OK -eq 1 ] || { echo "No known web build"; cat package.json || true; exit 1; }

          if   [ -d dist ];  then WEB_OUT="dist";
          elif [ -d build ]; then WEB_OUT="build";
          elif [ -d out ];   then WEB_OUT="out";
          else echo "No dist/build/out found"; exit 1; fi

          echo "==> Web build at: $WEB_OUT"
          if [ -f capacitor.config.json ]; then
            node -e "const fs=require('fs');const p='capacitor.config.json';const o=JSON.parse(fs.readFileSync(p));o.webDir='$WEB_OUT';fs.writeFileSync(p, JSON.stringify(o,null,2));console.log('Updated',p,'webDir=$WEB_OUT');"
          elif ls capacitor.config.* >/dev/null 2>&1; then
            sed -i.bak "s/webDir: *['\"][^'\"]*['\"]/webDir: '$WEB_OUT'/" capacitor.config.* || true
          else
            echo "WARN: No capacitor.config.* found in frontend"
          fi

      - name: Ensure iOS platform exists & sync
        script: |
          set -euxo pipefail
          cd frontend
          [ ! -d "ios" ] && npx cap add ios
          npx cap sync ios
          cd ios/App
          pod install --repo-update

      - name: Detect BUNDLE_ID (robust)
        script: |
          set -euxo pipefail
          cd "$IOS_DIR"
          [ -f "$CM_ENV" ] && sed -i.bak '/^export BUNDLE_ID=/d' "$CM_ENV" || true
          BID=""
          BID=$(xcodebuild -showBuildSettings -workspace "App.xcworkspace" -scheme "$APP_SCHEME" -configuration Release | awk -F' = ' '/^[[:space:]]*PRODUCT_BUNDLE_IDENTIFIER[[:space:]]*=/{print $2; exit}') || true
          if [ -z "${BID:-}" ] || [ "$BID" = "NO" ]; then
            BID=$(grep -Rho 'PRODUCT_BUNDLE_IDENTIFIER *= *[^;]*;' App.xcodeproj/project.pbxproj | head -n1 | sed -E 's/.*= *([^;]*);/\1/') || true
          fi
          if [ -z "${BID:-}" ] || [ "$BID" = "NO" ]; then
            cd "$CM_BUILD_DIR/../frontend" || true
            if [ -f capacitor.config.json ]; then
              BID=$(node -e "try{const o=require('./capacitor.config.json');console.log(o.appId||'');}catch(e){console.log('');}")
            elif ls capacitor.config.* >/dev/null 2>&1; then
              BID=$(awk -F"'" '/appId:/{gsub(/"|,/, "", $2); print $2; exit}' capacitor.config.* || true)
            fi
          fi
          [ -n "${BID:-}" ] && [ "$BID" != "NO" ] || { echo "Failed to detect PRODUCT_BUNDLE_IDENTIFIER (got '$BID')."; exit 1; }
          echo "Detected BUNDLE_ID=$BID"
          echo "export BUNDLE_ID=$BID" >> "$CM_ENV"

      - name: De-quarantine Xcode (fix -10814)
        script: |
          set -euxo pipefail
          /usr/bin/xattr -dr com.apple.quarantine /Applications/Xcode*.app || true

      - name: Bump build number & version (numeric CFBundleVersion)
        script: |
          set -euxo pipefail
          cd $IOS_DIR
          MARKETING_VERSION="${APP_VERSION:-1.0.0}"
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $MARKETING_VERSION" "App/Info.plist" || true
          NEW_BUILD_NUMBER="${CM_BUILD_NUMBER:-0}"
          if ! [ "$NEW_BUILD_NUMBER" -ge 1 ] 2>/dev/null; then
            NEW_BUILD_NUMBER=$(date +%Y%m%d%H%M)
          fi
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEW_BUILD_NUMBER" "App/Info.plist" || true
          echo "CFBundleShortVersionString=$MARKETING_VERSION"
          echo "CFBundleVersion=$NEW_BUILD_NUMBER"

      - name: Validate Info.plist versions
        script: |
          set -euxo pipefail
          cd $IOS_DIR
          SHORT=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleShortVersionString' App/Info.plist)
          BUILD=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleVersion' App/Info.plist)
          echo "CFBundleShortVersionString=$SHORT"
          echo "CFBundleVersion=$BUILD"
          echo "$BUILD" | grep -E '^[0-9]+(\.[0-9]+){0,2}$' >/dev/null || { echo "ERROR: CFBundleVersion חייב להיות מספר/מספר.מספר/מספר.מספר.מספר"; exit 1; }

      # 1) ארכוב ללא חתימה (כדי לא להתעסק עם Pods ופרופילים בשלב הזה)
      - name: Build (archive) UNSIGNED (no codesign at archive)
        script: |
          set -euxo pipefail
          [ -f "$CM_ENV" ] && . "$CM_ENV" || true
          cd $IOS_DIR

          : "${APPLE_TEAM_ID:?Missing APPLE_TEAM_ID}"
          : "${BUNDLE_ID:?Missing BUNDLE_ID}"

          xcodebuild archive \
            -workspace "App.xcworkspace" \
            -scheme "$APP_SCHEME" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID"

      # 2) Export חתום אוטומטית דרך App Store Connect API Key (בלי Apple ID/Keychain)
      - name: Export signed .ipa (automatic via App Store Connect API key)
        script: |
          set -euxo pipefail
          : "${APP_STORE_CONNECT_API_KEY_ID:?missing}"
          : "${APP_STORE_CONNECT_ISSUER_ID:?missing}"
          : "${APP_STORE_CONNECT_API_KEY_BASE64:?missing}"

          [ -f "$CM_ENV" ] && . "$CM_ENV" || true
          cd "$IOS_DIR"

          EXPORT_DIR="$CM_BUILD_DIR/Export"
          mkdir -p "$EXPORT_DIR"

          KEY_DIR="$HOME/.appstoreconnect/private_keys"
          mkdir -p "$KEY_DIR"
          KEY_PATH="$KEY_DIR/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8"
          echo "$APP_STORE_CONNECT_API_KEY_BASE64" | tr -d '\r\n\t ' | /usr/bin/base64 -D > "$KEY_PATH"
          chmod 600 "$KEY_PATH"

          # ExportOptions: automatic (לא ממפים provisioningProfiles כדי לא לגעת ב-frameworks)
          cat > /tmp/ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>teamID</key><string>39WVDVZKGE</string>
            <key>signingStyle</key><string>automatic</string>
            <key>manageAppVersionAndBuildNumber</key><false/>
            <key>compileBitcode</key><false/>
          </dict>
          </plist>
          EOF

          # אימות דרך ה-API Key, ומתן אפשרות ל-Xcode להוריד/לייצר פרופיל/תעודה Managed
          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            -exportPath "$EXPORT_DIR" \
            -exportOptionsPlist /tmp/ExportOptions.plist \
            -allowProvisioningUpdates \
            -authenticationKeyPath "$KEY_PATH" \
            -authenticationKeyID "$APP_STORE_CONNECT_API_KEY_ID" \
            -authenticationKeyIssuerID "$APP_STORE_CONNECT_ISSUER_ID" \
            | xcpretty || true

          echo "Exported files:"
          ls -la "$EXPORT_DIR"

          IPA_OUT=$(find "$EXPORT_DIR" -name "*.ipa" | head -n 1 || true)
          test -n "$IPA_OUT" || { echo "No IPA exported"; exit 1; }

          echo "Verifying embedded.mobileprovision exists in IPA..."
          unzip -l "$IPA_OUT" | grep -q "embedded.mobileprovision" || { 
            echo "ERROR: IPA missing embedded.mobileprovision"; 
            echo "Inspecting archived app…"
            /usr/bin/find "$CM_BUILD_DIR/App.xcarchive/Products/Applications" -name "*.app" -maxdepth 1 -print -exec /bin/ls -la {} \;
            exit 1; 
          }

          mkdir -p "$CM_BUILD_DIR/../build/ios/ipa"
          cp "$IPA_OUT" "$CM_BUILD_DIR/../build/ios/ipa/"

      - name: Upload to App Store Connect (Transporter with safer fallback)
        script: |
          set -euo pipefail
          set -x

          IPA_PATH=$(find "$CM_BUILD_DIR/../build/ios/ipa" -name "*.ipa" | head -n 1 || true)
          test -n "${IPA_PATH:-}" || { echo "No IPA found"; exit 1; }
          echo "Using IPA: $IPA_PATH"

          : "${APP_STORE_CONNECT_API_KEY_ID:?missing}"
          : "${APP_STORE_CONNECT_ISSUER_ID:?missing}"
          : "${APP_STORE_CONNECT_API_KEY_BASE64:?missing}"

          KEY_DIR="$HOME/.appstoreconnect/private_keys"
          mkdir -p "$KEY_DIR"
          KEY_PATH="$KEY_DIR/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8"
          echo "$APP_STORE_CONNECT_API_KEY_BASE64" | tr -d '\r\n\t ' | /usr/bin/base64 -D > "$KEY_PATH"
          chmod 600 "$KEY_PATH"

          TRANSPORTER_BIN="$(xcrun --find iTMSTransporter || true)"
          if [ -z "${TRANSPORTER_BIN}" ]; then
            CANDIDATES=$(/usr/bin/find /Applications -type f -name iTMSTransporter 2>/dev/null | tr '\n' ' ')
            for p in $CANDIDATES; do [ -x "$p" ] && TRANSPORTER_BIN="$p" && break; done
          fi
          echo "TRANSPORTER_BIN=${TRANSPORTER_BIN:-<none>}"
          if [ -n "${TRANSPORTER_BIN:-}" ]; then /usr/bin/xattr -dr com.apple.quarantine "$(dirname "$TRANSPORTER_BIN")" || true; fi

          run_transporter() {
            local mode="$1"
            if [ -n "${ITC_PROVIDER:-}" ]; then
              "$TRANSPORTER_BIN" -m "$mode" \
                -apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
                -apiIssuer "$APP_STORE_CONNECT_ISSUER_ID" \
                -assetFile "$IPA_PATH" \
                -itc_provider "$ITC_PROVIDER" \
                -v informational
            else
              "$TRANSPORTER_BIN" -m "$mode" \
                -apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
                -apiIssuer "$APP_STORE_CONNECT_ISSUER_ID" \
                -assetFile "$IPA_PATH" \
                -v informational
            fi
          }

          USED_FALLBACK=0
          if [ -n "${TRANSPORTER_BIN:-}" ]; then
            set +e
            run_transporter verify
            RC=$?
            set -e
            if [ $RC -ne 0 ]; then
              echo "Transporter verify failed ($RC). Trying upload directly…"
              set +e
              run_transporter upload
              RC2=$?
              set -e
              [ $RC2 -eq 0 ] || USED_FALLBACK=1
            fi
          else
            USED_FALLBACK=1
          fi

          if [ $USED_FALLBACK -eq 1 ]; then
            echo "Falling back to xcrun altool (deprecated)."
            if [ -n "${ITC_PROVIDER:-}" ]; then
              xcrun altool --validate-app --type ios --file "$IPA_PATH" --apiKey "$APP_STORE_CONNECT_API_KEY_ID" --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID" --itc_provider "$ITC_PROVIDER" || true
              xcrun altool --upload-app   --type ios --file "$IPA_PATH" --apiKey "$APP_STORE_CONNECT_API_KEY_ID" --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID" --itc_provider "$ITC_PROVIDER"
            else
              xcrun altool --validate-app --type ios --file "$IPA_PATH" --apiKey "$APP_STORE_CONNECT_API_KEY_ID" --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID" || true
              xcrun altool --upload-app   --type ios --file "$IPA_PATH" --apiKey "$APP_STORE_CONNECT_API_KEY_ID" --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID"
            fi
          fi

    artifacts:
      - build/ios/ipa/*.ipa
      - $IOS_DIR/build/Build/Products/Release-iphoneos/*.app
      - $CM_BUILD_DIR/App.xcarchive
      - $CM_BUILD_DIR/Export/*
